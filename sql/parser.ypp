
%{


#include"sql_node.h"

SqlNode *parse_tree;

extern FILE * ferr;

%}


%union{
int ival;
float fval;
char *sval;
SqlOp opval;
struct SqlNode* n;
}




%token <sval>   WORD 
%token <sval>   LITERAL  
%token <ival>   INT 
%token <fval>   FLOAT 


%token 
    NONE
    CREATE
    DROP
    TABLE
    INDEX
    HELP
    VALUES
    INSERT
    DELET
    UPDATE
    INTO
    AND
    OR
    NOT
    EQ
    NE
    LT
    LE
    GT
    GE


%token SELECT FROM WHERE

%type <opval> op

%type <n>   sql 
            ddl 
            dml
            create_statment
            insert_statment
            insert_values
            select_statment
            cond_list
            cmp_statment
            cmp_val
            column_list
            sql_value
            table_list
            table
            column
            



%%


start:                  sql   
                    |   select_statment  {fprintf(ferr,"start\n");  parse_tree=$1;   print_node(ferr,$1); }         
                    ;

sql:                    ddl
                    |   dml {fprintf(ferr,"sql\n");   $$=$1;}
                    ;



ddl:                    create_statment
                    ;

dml:                    insert_statment
                    ;

create_statment:         CREATE table
                    ;

insert_statment:   
                        INSERT INTO table VALUES '(' insert_values ')'
                    ;

insert_values:   
                        insert_values ','  sql_value
                    |   sql_value
                    ;


select_statment:
                        SELECT column_list FROM table_list WHERE cond_list {fprintf(ferr,"sel_statment1\n");   $$=select_node($2,$4,$6);}
                    |   SELECT column_list FROM table_list                      {fprintf(ferr,"sel_statment2\n");   $$=select_node($2,$4,NULL);}
                        ;
cond_list:
                        cond_list AND cmp_statment  {$$=cond_node($1,SQL_AND,$3);}
                    |   cond_list OR cmp_statment
                    |   NOT cond_list
                    |   '(' cond_list ')'
                    |   cmp_statment          
                    ;
            
cmp_statment:
                        cmp_val op cmp_val      {fprintf(ferr,"cmp_statment\n");  $$=cond_node($1,$2,$3);}
                    ;   

cmp_val:            
                        column                  
                    |   sql_value
                    ;

column_list:
                        column ',' column_list   {$$=list_node($3,$1);}
                    |   column              {fprintf(ferr,"col_list\n"); $$=list_node($1,NULL);}
                    ;

sql_value:
                        INT                 {fprintf(ferr,"INT");$$=value_node(&$1,SQL_INT);        }
                    |   FLOAT               {fprintf(ferr,"INT");$$=value_node(&$1,SQL_FLOAT);        }
                    |   LITERAL             {fprintf(ferr,"INT");$$=value_node(&$1,SQL_LITERAL);        }
                    ;

table_list:             table ',' table_list   {$$=list_node($3,$1);}
                    |   table              {fprintf(ferr,"table_list\n");    $$=list_node($1,NULL);}
                    ;

column:                 WORD '.' WORD     {fprintf(ferr,"rel.col:%s.%s\n",$1,$3);$$=col_node($1,$3);}
                    |   WORD               {fprintf(ferr,"column:%s\n",$1);$$=col_node($1,"null");} 
                    ;   

table:                  WORD        {
                                        fprintf(ferr,"table:%s,\n",$1);
                                        $$=rel_node($1);
                                        }          
                    ;



op: 
                        EQ      {$$=SQL_EQ;}
                    |   LT      {$$=SQL_LT;}
                    |   GT      {$$=SQL_GT;}
                    |   LE      {$$=SQL_LE;}
                    |   GE      {$$=SQL_GE;}
                    |   NE      {$$=SQL_NE;}
                    ;
        
%%

