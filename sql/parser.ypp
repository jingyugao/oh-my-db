
%{


#include"sql_node.h"

SqlNode *parse_tree;

extern FILE * stderr;

%}


%union{
int ival;
float fval;
char *sval;
SqlOp opval;
struct SqlNode* n;
}




%token <sval>   WORD 
%token <sval>   LITERAL  
%token <ival>   INT 
%token <fval>   FLOAT 


%token 
    NONE
    CREATE
    DROP
    DATABASE
    TABLE
    INDEX
    HELP
    VALUES
    INSERT
    DELETE
    T_INT
    T_FLOAT
    T_VARCHAR
    UPDATE
    INTO
    AND
    OR
    NOT
    EQ
    NE
    LT
    LE
    GT
    GE

%left AND OR 
%nonassoc NOT 


%token SELECT FROM WHERE

%type <opval> op

%type <n>   sql 
            ddl 
            dml
            create_relation
            drop_relation
            create_db
            drop_db
            insert_statment
            insert_values
            select_statment
            cond_list
            update_statment
            delete_statment
            attr
            attr_list
            cmp_statment
            cmp_val
            column_list
            sql_value
            rel_list
            relation
            column
            



%%


start:                  sql   {fprintf(stderr,"start\n");  parse_tree=$1;   print_node(stderr,$1); } 
                    |          
                    ;

sql:                    ddl
                    |   dml {fprintf(stderr,"sql\n");   $$=$1;}
                    ;



ddl:                    create_relation   
                    |   drop_relation
                    |   create_db
                    |   drop_db
                    ;

dml:                    insert_statment
                    |   select_statment
                    |   update_statment
                    |   delete_statment
                    ;

create_relation:         CREATE TABLE relation  '(' attr_list ')'   {fprintf(stderr,"create\n");$$=create_node($3,$5);   }      
                    ;

drop_relation:          DROP TABLE  relation        { fprintf(stderr,"drop\n");$$=drop_node($3);}
                    ;

create_db:              CREATE DATABASE WORD        { fprintf(stderr,"create db\n"); $$=db_node($3,DB_CREATE);}
                    ;

drop_db:              DROP DATABASE WORD  { fprintf(stderr,"drop db\n"); $$=db_node($3,DB_DROP);}
                    ;

insert_statment:   
                        INSERT INTO relation VALUES '(' insert_values ')'   {fprintf(stderr,"insert\n");$$=insert_node($3,$6,NULL);}
                    |   INSERT INTO relation '(' column_list ')' VALUES '(' insert_values ')'  {fprintf(stderr,"insert\n");$$=insert_node($3,$9,$5);}
                    ;
insert_values:   
                        sql_value ',' insert_values    {fprintf(stderr,"insert_values\n");$$=list_node($1,$3);}
                    |   sql_value                      {fprintf(stderr,"insert_values\n");$$=list_node($1,NULL);}
                    ;


select_statment:
                        SELECT column_list  FROM rel_list WHERE cond_list       {fprintf(stderr,"sel_statment1\n");   $$=select_node($2,$4,$6);}
                    |   SELECT column_list  FROM rel_list                       {fprintf(stderr,"sel_statment2\n");   $$=select_node($2,$4,NULL);}
                        ;


update_statment:        UPDATE  {$$=NULL;}
                    ;

delete_statment:        DELETE  {$$=NULL;}
                    ;

cond_list:
                        cond_list AND cond_list  {$$=cond_node($1,SQL_AND,$3);}
                    |   cond_list OR cond_list   {$$=cond_node($1,SQL_OR,$3);}
                    |   NOT cond_list               {$$=cond_node($2,SQL_NOT,NULL);}
                    |   '(' cond_list ')'           {$$=$2;}
                    |   cmp_statment          
                    ;
            
cmp_statment:
                        cmp_val op cmp_val      {fprintf(stderr,"cmp_statment\n");  $$=cond_node($1,$2,$3);}
                    ;   

cmp_val:            
                        column                  
                    |   sql_value
                    ;

column_list:
                        column ',' column_list   {fprintf(stderr,"col_list 2\n");$$=list_node($1,$3);}
                    |   column              {fprintf(stderr,"col_list\n"); $$=list_node($1,NULL);}
                    ;


attr_list:              attr ',' attr_list   {fprintf(stderr,"attr_list\n");$$=list_node($1,$3);}
                    |   attr               {fprintf(stderr,"attr_list 2\n");$$=list_node($1,NULL);}
                    ;

attr:                   WORD  T_INT                  {fprintf(stderr,"attr\n");$$=attr_node($1,SQL_INT);}
                    |   WORD  T_FLOAT                {fprintf(stderr,"attr\n");$$=attr_node($1,SQL_FLOAT);}
                    |   WORD  T_VARCHAR '(' INT ')'  {fprintf(stderr,"attr\n");$$=attr_node($1,SQL_VARCHAR,$4);}
                    ;



sql_value:
                        INT                 {fprintf(stderr,"INT\n");$$=value_node(&$1,SQL_INT);        }
                    |   FLOAT               {fprintf(stderr,"FLOAT\n");$$=value_node(&$1,SQL_FLOAT);        }
                    |   LITERAL             {fprintf(stderr,"LITERAL\n");$$=value_node($1,SQL_VARCHAR);        }
                    ;

rel_list:               relation ',' rel_list   {$$=list_node($3,$1);}
                    |   relation              {fprintf(stderr,"rel_list\n");    $$=list_node($1,NULL);}
                    ;


column:                 WORD '.' WORD     {fprintf(stderr,"rel.col:%s.%s\n",$1,$3);$$=col_node($1,$3);}
                    |   WORD               {fprintf(stderr,"column:%s\n",$1);$$=col_node($1,"null");} 
                    ;   

relation:                  WORD        {
                                        fprintf(stderr,"relation:%s,\n",$1);
                                        $$=rel_node($1);
                                        }          
                    ;



op: 
                        EQ      {$$=SQL_EQ;}
                    |   LT      {$$=SQL_LT;}
                    |   GT      {$$=SQL_GT;}
                    |   LE      {$$=SQL_LE;}
                    |   GE      {$$=SQL_GE;}
                    |   NE      {$$=SQL_NE;}
                    ;
        
%%

